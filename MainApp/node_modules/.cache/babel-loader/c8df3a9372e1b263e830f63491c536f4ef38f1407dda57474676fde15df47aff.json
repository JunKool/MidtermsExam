{"ast":null,"code":"var _jsxFileName = \"/Users/scheundt/NodeJS_Projects/TS_ReactTemplate/src/components/EmailLogViewer.tsx\",\n  _s = $RefreshSig$();\n// EmailLogViewer.tsx\nimport React, { useState, useEffect } from 'react';\nimport { emailServiceApi } from '../services/EmailService';\nimport { marketingServiceApi } from '../services/MarketingService';\nimport { userServiceApi } from '../services/UserService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailLogViewer = () => {\n  _s();\n  const [emailLog, setEmailLog] = useState(emailServiceApi.getEmailLogJournal());\n  const [frequency, setFrequency] = useState(1); // Default frequency: every 1 minute\n  const [newFrequency, setNewFrequency] = useState(1); // State to manage the input for the new frequency\n\n  useEffect(() => {\n    // Trigger the sending of emails when the app starts\n    sendEmails();\n\n    // Set up an interval to periodically fetch the updated email log\n    const intervalId = setInterval(() => {\n      sendEmails();\n      setEmailLog(emailServiceApi.getEmailLogJournal());\n    }, frequency * 60000); // Convert minutes to milliseconds\n\n    return () => clearInterval(intervalId); // Cleanup on component unmount\n  }, [frequency]);\n  const sendEmails = () => {\n    const userOfferRelationships = marketingServiceApi.getAllUserOfferRelationships();\n    const currentDateTime = new Date();\n    userOfferRelationships.forEach(relationship => {\n      const {\n        userId,\n        offerIds\n      } = relationship;\n\n      // Check if user's MarketingDateSent is valid\n\n      userServiceApi.getUserById(userId).then(response => {\n        const user = response.data;\n        if (user && user.marketingDateSent) {\n          const marketingDateSent = new Date(user.marketingDateSent);\n          const nextEmailDateTime = new Date(marketingDateSent.getTime() + frequency * 60000);\n\n          // Check if the current time is greater than the next scheduled email time\n          if (currentDateTime >= nextEmailDateTime) {\n            // Check if the user-offer relationship exists\n            if (offerIds.length > 0) {\n              // Send email (simulated for now)\n              emailServiceApi.sendEmail(user.firstname, offerIds).then(success => {\n                // Log the email details\n                const logEntry = {\n                  user: user.firstname,\n                  offers: offerIds,\n                  sentDateTime: new Date().toISOString(),\n                  success\n                };\n                emailServiceApi.getEmailLogJournal().push(logEntry);\n              });\n            }\n          }\n        }\n      }).catch(error => {\n        console.error('Error fetching user:', error);\n      });\n    });\n  };\n  const handleFrequencyChange = () => {\n    setFrequency(newFrequency); // Update the frequency when the button is clicked\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Email Log Viewer:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Frequency (minutes):\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: newFrequency,\n        onChange: e => setNewFrequency(Number(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleFrequencyChange,\n      children: \"Change Frequency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Offers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Sent Date/Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Success\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: emailLog.map((logEntry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: logEntry.user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: logEntry.offers.join(', ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: logEntry.sentDateTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: logEntry.success ? 'Yes' : 'No'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(EmailLogViewer, \"0vxemieRQBXenkW5efnpOM9Xxo0=\");\n_c = EmailLogViewer;\nexport default EmailLogViewer;\nvar _c;\n$RefreshReg$(_c, \"EmailLogViewer\");","map":{"version":3,"names":["React","useState","useEffect","emailServiceApi","marketingServiceApi","userServiceApi","jsxDEV","_jsxDEV","EmailLogViewer","_s","emailLog","setEmailLog","getEmailLogJournal","frequency","setFrequency","newFrequency","setNewFrequency","sendEmails","intervalId","setInterval","clearInterval","userOfferRelationships","getAllUserOfferRelationships","currentDateTime","Date","forEach","relationship","userId","offerIds","getUserById","then","response","user","data","marketingDateSent","nextEmailDateTime","getTime","length","sendEmail","firstname","success","logEntry","offers","sentDateTime","toISOString","push","catch","error","console","handleFrequencyChange","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","Number","target","onClick","map","index","join","_c","$RefreshReg$"],"sources":["/Users/scheundt/NodeJS_Projects/TS_ReactTemplate/src/components/EmailLogViewer.tsx"],"sourcesContent":["// EmailLogViewer.tsx\nimport React, { useState, useEffect } from 'react';\nimport { emailServiceApi } from '../services/EmailService';\nimport { marketingServiceApi } from '../services/MarketingService';\nimport { userServiceApi } from '../services/UserService';\n\nconst EmailLogViewer: React.FC = () => {\n    const [emailLog, setEmailLog] = useState(emailServiceApi.getEmailLogJournal());\n    const [frequency, setFrequency] = useState<number>(1); // Default frequency: every 1 minute\n    const [newFrequency, setNewFrequency] = useState<number>(1); // State to manage the input for the new frequency\n\n    useEffect(() => {\n        // Trigger the sending of emails when the app starts\n        sendEmails();\n\n        // Set up an interval to periodically fetch the updated email log\n        const intervalId = setInterval(() => {\n            sendEmails();\n            setEmailLog(emailServiceApi.getEmailLogJournal());\n        }, frequency * 60000); // Convert minutes to milliseconds\n\n        return () => clearInterval(intervalId); // Cleanup on component unmount\n    }, [frequency]);\n\n    const sendEmails = () => {\n        const userOfferRelationships = marketingServiceApi.getAllUserOfferRelationships();\n        const currentDateTime = new Date();\n\n        userOfferRelationships.forEach((relationship) => {\n            const { userId, offerIds } = relationship;\n\n            // Check if user's MarketingDateSent is valid\n\n            userServiceApi.getUserById(userId)\n                .then(response => {\n                    const user = response.data;\n                    if (user && user.marketingDateSent) {\n                        const marketingDateSent = new Date(user.marketingDateSent);\n                        const nextEmailDateTime = new Date(marketingDateSent.getTime() + frequency * 60000);\n\n                        // Check if the current time is greater than the next scheduled email time\n                        if (currentDateTime >= nextEmailDateTime) {\n                            // Check if the user-offer relationship exists\n                            if (offerIds.length > 0) {\n                                // Send email (simulated for now)\n                                emailServiceApi.sendEmail(user.firstname, offerIds)\n                                    .then((success) => {\n                                        // Log the email details\n                                        const logEntry = {\n                                            user: user.firstname,\n                                            offers: offerIds,\n                                            sentDateTime: new Date().toISOString(),\n                                            success,\n                                        };\n                                        emailServiceApi.getEmailLogJournal().push(logEntry);\n                                    });\n                            }\n                        }\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching user:', error);\n                });\n\n        });\n    };\n\n    const handleFrequencyChange = () => {\n        setFrequency(newFrequency); // Update the frequency when the button is clicked\n      };\n\n    return (\n        <div>\n            <h2>Email Log Viewer:</h2>\n      <label>\n        Frequency (minutes):\n        <input\n          type=\"number\"\n          value={newFrequency}\n          onChange={(e) => setNewFrequency(Number(e.target.value))}\n        />\n      </label>\n      <button type=\"button\" onClick={handleFrequencyChange}>\n        Change Frequency\n      </button>\n            <table>\n                <thead>\n                    <tr>\n                        <th>User</th>\n                        <th>Offers</th>\n                        <th>Sent Date/Time</th>\n                        <th>Success</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {emailLog.map((logEntry, index) => (\n                        <tr key={index}>\n                            <td>{logEntry.user}</td>\n                            <td>{logEntry.offers.join(', ')}</td>\n                            <td>{logEntry.sentDateTime}</td>\n                            <td>{logEntry.success ? 'Yes' : 'No'}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default EmailLogViewer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}